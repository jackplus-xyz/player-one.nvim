name: Release

on:
  push:
    # tags:
    #   - "v*"

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
    strategy:
      matrix:
        include:
          ## Linux builds
          # # Glibc 2.31
          # - os: ubuntu-20.04
          #   target: x86_64-unknown-linux-gnu
          #   artifact_name: target/x86_64-unknown-linux-gnu/release/libplayer_one.so
          # - os: ubuntu-20.04
          #   target: aarch64-unknown-linux-gnu
          #   artifact_name: target/aarch64-unknown-linux-gnu/release/libplayer_one.so
          # Musl 1.2.3
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: target/x86_64-unknown-linux-musl/release/libplayer_one.so
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            artifact_name: target/aarch64-unknown-linux-musl/release/libplayer_one.so
          # # Android(Termux)
          # - os: ubuntu-latest
          #   target: aarch64-linux-android
          #   artifact_name: target/aarch64-linux-android/release/libplayer_one.so

          ## macOS builds
          # - os: macos-latest
          #   target: x86_64-apple-darwin
          #   artifact_name: target/x86_64-apple-darwin/release/libplayer_one.dylib
          # - os: macos-latest
          #   target: aarch64-apple-darwin
          #   artifact_name: target/aarch64-apple-darwin/release/libplayer_one.dylib

          ## Windows builds
          # - os: windows-latest
          #   target: x86_64-pc-windows-msvc
          #   artifact_name: target/x86_64-pc-windows-msvc/release/player_one.dll

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install Rust
        run: |
          rustup toolchain install nightly
          rustup default nightly
          rustup target add ${{ matrix.target }}

      - name: Build for Linux
        if: contains(matrix.os, 'ubuntu')
        run: |
          cargo install cross --git https://github.com/cross-rs/cross
          CROSS_CONTAINER_ENGINE_NO_BUILDKIT=1 cross build --release --target ${{ matrix.target }}
          mv "${{ matrix.artifact_name }}" "${{ matrix.target }}.so"

      # - name: Build for macOS
      #   if: contains(matrix.os, 'macos')
      #   env:
      #     LIBRARY_PATH: /usr/local/lib:/opt/homebrew/lib
      #     DYLD_LIBRARY_PATH: /usr/local/lib:/opt/homebrew/lib
      #     PKG_CONFIG_PATH: /usr/local/opt/luajit/lib/pkgconfig:/opt/homebrew/opt/luajit/lib/pkgconfig
      #   run: |
      #     if [[ "${{ matrix.target }}" == "x86_64-apple-darwin" ]]; then
      #       # Install x86_64 homebrew if it doesn't exist
      #       if [ ! -f /usr/local/bin/brew ]; then
      #         arch -x86_64 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
      #       fi
      #       # Install and set up for x86_64
      #       arch -x86_64 /usr/local/bin/brew install luajit
      #       export LIBRARY_PATH="/usr/local/lib"
      #       export DYLD_LIBRARY_PATH="/usr/local/lib"
      #       export PKG_CONFIG_PATH="/usr/local/opt/luajit/lib/pkgconfig"
      #       MACOSX_DEPLOYMENT_TARGET="13" RUSTFLAGS="-L /usr/local/opt/luajit/lib" cargo build --release --target ${{ matrix.target }}
      #     else
      #       # Install and set up for arm64
      #       arch -arm64 /opt/homebrew/bin/brew install luajit
      #       export LIBRARY_PATH="/opt/homebrew/lib"
      #       export DYLD_LIBRARY_PATH="/opt/homebrew/lib"
      #       export PKG_CONFIG_PATH="/opt/homebrew/opt/luajit/lib/pkgconfig"
      #       MACOSX_DEPLOYMENT_TARGET="13" RUSTFLAGS="-L /opt/homebrew/opt/luajit/lib" cargo build --release --target ${{ matrix.target }}
      #     fi
      #
      #     mv "${{ matrix.artifact_name }}" "${{ matrix.target }}.dylib"

      # - name: Build for Windows
      #   if: contains(matrix.os, 'windows')
      #   run: |
      #     cargo build --release --target ${{ matrix.target }}
      #     mv "${{ matrix.artifact_name }}" "${{ matrix.target }}.dll"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: ${{ matrix.target }}.*

  release:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Generate checksums
        run: |
          for file in ./**/*; do
            sha256sum "$file" > "${file}.sha256"
          done

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          token: ${{ github.token }}
          files: ./**/*
          draft: false
          prerelease: false
          generate_release_notes: true
